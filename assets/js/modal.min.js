/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	  var modalWrapper = null;
	  var dataModals = null;
	  var openModals = [];

	  var disableParentEvents = function disableParentEvents() {
	    for (var i = 0; i < dataModals.length; i++) {
	      var modal = dataModals[i];

	      // Disable closing the modal wrapper if modal gets clicked
	      modal.addEventListener('click', function (event) {
	        event.stopPropagation();
	      });
	    }
	  };

	  var closeModalsOnEsc = function closeModalsOnEsc() {
	    window.addEventListener('keyup', function (event) {
	      if (openModals.length && event.keyCode === 27) {
	        api.closeCurrent();
	      }
	    });
	  };

	  var closeModalWrapper = function closeModalWrapper() {
	    modalWrapper.classList.remove('visible');

	    // Re-enable parent scrolling
	    document.body.style.overflow = 'auto';
	  };

	  var api = {
	    init: function init() {
	      modalWrapper = document.querySelector('.modal-wrapper');
	      dataModals = document.querySelectorAll('[data-modal]');

	      var triggers = document.querySelectorAll('[data-modaltrigger]');
	      for (var i = 0; i < triggers.length; i++) {
	        triggers[i].addEventListener('click', function (event) {
	          var modalName = event.target.dataset.modaltrigger;
	          api.open(modalName);
	        });
	      }

	      // Close all modals when clicking outside modal
	      modalWrapper.addEventListener('click', function (event) {
	        api.closeCurrent();
	      });

	      disableParentEvents();
	      closeModalsOnEsc();
	    },
	    open: function open(modalName, cb) {
	      var modal = document.querySelectorAll('[data-modal="' + modalName + '"]')[0];

	      // If modal is already open, don't do anything
	      if (openModals.indexOf(modal) >= 0) return;

	      if (modal) {
	        modal.classList.add('visible');
	        modalWrapper.classList.add('visible');

	        // Disable parent scrolling when modal is open
	        document.body.style.overflow = 'hidden';

	        openModals.push(modal);
	      } else {
	        console.error('Could not find modal with name "%s"', modalName);
	      }

	      typeof cb === 'function' && cb();
	    },
	    closeCurrent: function closeCurrent(cb) {
	      var modal = openModals.pop();
	      modal.classList.remove('visible');

	      if (openModals.length === 0) {
	        closeModalWrapper();
	      }

	      typeof cb === 'function' && cb();
	    },
	    closeAll: function closeAll(cb) {
	      for (var i = 0; i < dataModals.length; i++) {
	        dataModals[i].classList.remove('visible');
	        closeModalWrapper();
	      }

	      typeof cb === 'function' && cb();
	    }
	  };

	  window.modal = api;
	})();

/***/ }
/******/ ]);